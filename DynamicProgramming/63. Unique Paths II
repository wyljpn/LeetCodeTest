class Solution(object):
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        
        dp = [[0 for _ in range(n)] for _ in range(m)]  # 不能使用[[0] * n] * m初始化，否则初始化出来的数组是共享空间的，修改其中一个值，所有的元素都会被更改。
        
        blockFlag = False
        for i in range(m):
            if obstacleGrid[i][0] == 1 or blockFlag:
                dp[i][0] = 0
                blockFlag = True
            else:
                dp[i][0] = 1
                print(dp)
        # print(dp)
        
        blockFlag = False
        for j in range(n):
            if obstacleGrid[0][j] == 1 or blockFlag:
                dp[0][j] = 0
                blockFlag = True
            else:
                dp[0][j] = 1
        # print(dp)
        
        for i in range(1, m):
            for j in range(1, n):
                if obstacleGrid[i][j] == 0:
                    dp[i][j] = dp[i-1][j] + dp[i][j-1]
                else:
                    dp[i][j] = 0
        
        # print(dp)
        
        return dp[m-1][n-1]
